version: '3.7'

services:
  frontend:
    build: ./uds-public
    restart: 'no'
    container_name: uds-frontend-public
    volumes:
      - ./Docker/data/public:/app/volume
    command: cp -a /app/build/. /app/volume
    networks:
      - app-network
    env_file:
      - .env
  frontend-admin:
    build: ./uds-admin
    restart: 'no'
    container_name: uds-frontend-admin
    volumes:
      - ./Docker/data/admin:/app/volume
    command: cp -a /app/build/. /app/volume
    networks:
      - app-network
    env_file:
      - .env
  db:
    build: ./db
    restart: always
    container_name: uds-database
    ports:
      - '3322:3306'
    networks:
      - app-network
    volumes:
      - ./db/my.cnf:/etc/my.cnf
      - ./Docker/data/db:/var/lib/mysql
      - ./Docker/data/db-backups:/bckp
    environment:
      - MYSQL_ROOT_PASSWORD=${DB_PASS}
      - MYSQL_DATABASE=${DB_NAME}
  api:
    build: ./api
    restart: unless-stopped
    container_name: uds-api
    networks:
      - app-network
    links:
      - db
    ports: 
      - 7000:7000
    env_file:
      - .env
    depends_on:
      - db
  mysql-cron-backup:
    image: fradelg/mysql-cron-backup
    networks:
      - app-network
    env_file:
      - .env
    environment:
      - MYSQL_HOST=db
      - MYSQL_USER=root
      - MYSQL_PASS=${DB_PASS}
      - MYSQL_DB=${DB_NAME}
      - MAX_BACKUPS=30
      - INIT_BACKUP=0
      - CRON_TIME=0 3 * * *
    restart: unless-stopped
    depends_on:
      - db
    links:
      - db
    volumes:
      - ./Docker/data/db-backups:/backup
  nginx:
    build: ./nginx
    container_name: uds-nginx
    restart: unless-stopped
    links: 
      - api
    networks:
      - app-network
    volumes:
      - type: bind
        source: ./Docker/data/public
        target: /var/www/html/app
      - type: bind
        source: ./Docker/data/admin
        target: /var/www/html/app-admin
      - type: bind
        source: ./nginx
        target: /etc/nginx/conf.d
      - type: bind
        source: ./Docker/data/logs
        target: /var/log/nginx/f
      - type: bind
        source: ./Docker/data/certbot/conf
        target: /etc/letsencrypt
      - type: bind
        source: ./Docker/data/certbot/www
        target: /var/www/certbot
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - api
      - db
      - frontend
    certbot:
       image: certbot/certbot
       container_name: uds-certbot
       restart: unless-stopped
       volumes:
         - ./Docker/data/certbot/conf:/etc/letsencrypt
         - ./Docker/data/certbot/www:/var/www/certbot
       entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

networks:
  app-network:
    driver: bridge